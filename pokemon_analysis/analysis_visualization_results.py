# -*- coding: utf-8 -*-
"""analysis_visualization_results.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zhzT92H_z0eWihbMxRcrcGcqG5VLsl_a
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from ipywidgets import interact, IntSlider
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('https://raw.githubusercontent.com/lgreski/pokemonData/refs/heads/master/Pokemon.csv')
# df

# df.isnull().sum()
# No null values in data

# df.describe()



# plt.figure(figsize=(12, 6))
# df[['HP', 'Attack', 'Defense', 'Speed', 'Sp. Atk', 'Sp. Def']].hist(figsize=(12, 6), bins=20)
# plt.suptitle("Distribution of Base Stats", fontsize=14)
# plt.show()

generation_to_region = {
    1: 'Kanto', 2: 'Johto', 3: 'Hoenn', 4: 'Sinnoh',
    5: 'Unova', 6: 'Kalos', 7: 'Alola', 8: 'Galar', 9: 'Paldea'
}
df['Region'] = df['Generation'].map(generation_to_region)
df

region_dummies = pd.get_dummies(df['Region'])

df_encoded = pd.concat([df, region_dummies], axis=1)

stat_cols = ['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']
correlation_data = df_encoded[stat_cols + list(region_dummies.columns)]

correlation_matrix = correlation_data.corr()
region_vs_stats = correlation_matrix.loc[stat_cols, region_dummies.columns]
print(region_vs_stats)

plt.figure(figsize=(10, 6))
sns.heatmap(region_vs_stats, annot=True, cmap='coolwarm')
plt.title('Correlation Between Pokémon Stats and Regions')
plt.show()

sns.set(style="whitegrid")

stat_cols = ['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']
X = df[stat_cols]

# Normalize stats
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# PCA transform for fixed components
pca = PCA(n_components=2)
pca_components = pca.fit_transform(X_scaled)
df['PCA1'] = pca_components[:, 0]
df['PCA2'] = pca_components[:, 1]

# Interactive plot function
def plot_clusters(k):
    # Perform KMeans clustering
    kmeans = KMeans(n_clusters=k, random_state=42)
    df['Cluster'] = kmeans.fit_predict(X_scaled)

    # Plot PCA scatterplot
    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=df, x='PCA1', y='PCA2', hue='Cluster', palette='Set2', alpha=0.7)
    plt.title(f"K-means Clustering of Pokémon (k={k})")
    plt.xlabel("PCA Component 1")
    plt.ylabel("PCA Component 2")
    plt.legend(title="Cluster")
    plt.grid(True)
    plt.show()

    # Show mean stats per cluster
    cluster_centroids = df.groupby('Cluster')[stat_cols].mean().round(1)
    display(cluster_centroids)

# Create interactive slider
interact(plot_clusters, k=IntSlider(value=4, min=2, max=10, step=1, description="Clusters (k)"))

import matplotlib.pyplot as plt
import seaborn as sns

# Compute mean of total base stats by generation
df['Total'] = df[['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']].sum(axis=1)
mean_total_by_gen = df.groupby('Generation')['Total'].mean().reset_index()

# Plot scatter plot with regression line
plt.figure(figsize=(10, 6))
sns.scatterplot(data=mean_total_by_gen, x='Generation', y='Total', s=100)
sns.regplot(data=mean_total_by_gen, x='Generation', y='Total', scatter=False, color='red', line_kws={"linewidth":2})
plt.title('Mean Total Base Stats by Pokémon Generation')
plt.xlabel('Generation')
plt.ylabel('Average Total Base Stats')
plt.grid(True)
plt.tight_layout()
plt.show()